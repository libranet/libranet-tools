# This is a comment.
# Important: You *must* indent using <TAB>s, not spaces.
MAKEFLAGS += --always-make --warn-undefined-variables
.DEFAULT_GOAL := help # set default goal to not be dependent on sorting / ordering.
.NOTPARALLEL:
.ONESHELL:  # all lines of the recipe will be given to a single invocation of the shell

help:  #? display this help information
	@ grep "^#?" makefile | cut -c 4-
	@ echo -e "\nThis help is generated by parsing the inline comments."
	@ echo -e "Please use \`make <target>' where <target> is one of:\n"
	@ grep -E '^[a-zA-Z_-]+:.*?#?.*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?#\\? "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'

# See https://stackoverflow.com/questions/19456518/error-when-using-sed-with-find-command-on-os-x-invalid-command-code
# By default MacOS does not use GNU Sed, but a different less-compatible sed-implemenation that
# easily triggers following error: 'invalid command code'.
# You need to install GNU Sed via 'brew install gnu-sed' to make the 'gsed'-command available on $PATH.
# In our makesfiles, use gsed if found, otherwise regular sed.
SED=`command -v gsed || command -v sed`

CMD=$(realpath bin/semgrep)


clean:
	@ rm -fr bin include lib lib64 pyvenv.cfg
	@ rm -fr var

create-dirs:
	@ mkdir -p etc
	@ mkdir -p var/cache
	@ mkdir -p var/log

install: create-dirs create-venv upgrade-pip install-packages install-dotenv install-symlinks

update: upgrade-pip install-packages

create-venv:
	python3 -m venv .

 upgrade-pip:
	bin/python -m pip install --upgrade pip

install-packages:
	bin/pip install --upgrade semgrep autoread-dotenv

install-dotenv: #? generate .dotenv from template
	@ echo -e "Copying .env.template to .env"
	@ cp -n .env.template .env
	@ echo "Please review the config in .env"
	@ echo -e "Replacing string __CWD__ -> $(PWD)"
	@ $(SED) -i 's@__CWD__@'"$(PWD)"'@' .env

install-symlinks:
	@ echo -e "Symlink ${CMD} to ${HOME}/bin/"
	@ cd ~/bin && ln -sf ${CMD}
	@ cd ~/bin && ln -sf $(realpath bin/pysemgrep)

# cp --backup  creates .env~, but will overwrite this next time.
# safest way, is to not overwrite existing .env-files, manual intervention needed.
dotenv-install-from-template:  #? instantiate the dotenv-file (no override)
	@ echo -e "Copying .env.template to .env" ;\
	@ cp -n .env.template .env ;\
	@ echo "Please review any credentials in the .env-file."

dotenv-set-basedir: #? replace placeholder __CDW__ with current working directory
	@ echo -e "Replacing string __CWD__ -> $(PWD)" ;\
	@ $(SED) -i 's@__CWD__@'"$(PWD)"'@'  .env

dotenv-install: dotenv-install-from-template dotenv-set-basedir #? install .env-file from .env.template
