# This is a comment.
# Important: You *must* indent using <TAB>s, not spaces.
MAKEFLAGS += --always-make --warn-undefined-variables
.DEFAULT_GOAL := help # set default goal to not be dependent on sorting / ordering.
.NOTPARALLEL:
.ONESHELL:  # all lines of the recipe will be given to a single invocation of the shell

help:  #? display this help information
	@ grep "^#?" makefile | cut -c 4-
	@ echo -e "\nThis help is generated by parsing the inline comments."
	@ echo -e "Please use \`make <target>' where <target> is one of:\n"
	@ grep -E '^[a-zA-Z_-]+:.*?#?.*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?#\\? "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'


# SHELL := /bin/bash  # switch from default /bin/sh

SED=`command -v gsed || command -v sed`

#?
#? Manage a local installation of poe.
#? website: https://poethepoet.natn.io

clean:  #? clean remove generated files & dirs
	@ rm -fr bin include lib lib64 pyvenv.cfg
	@ rm -fr var

create-dirs: #? create files and directories
	@ mkdir -p etc
	@ mkdir -p var/cache
	@ mkdir -p var/tmp

install: create-dirs create-venv upgrade-pip install-packages install-dotenv install-symlinks version  #? run all install-steps

update: upgrade-pip install-packages version #? update the current installation

revert: #? revert to frozen requirements
	bin/python -m pip install -r etc/requirements.txt

freeze: create-dirs #? freeze current requirements
	bin/python -m pip freeze > etc/requirements.txt

create-venv: #? create a virtual python-environment
	python3 -m venv .

upgrade-pip: #? upgrade pip itself
	bin/python -m pip freeze > etc/requirements.txt
	bin/python -m pip install --upgrade pip

install-packages: #? install python-packages via pip
	bin/pip install --upgrade poethepoet autoread-dotenv

install-dotenv: #? generate .dotenv from template
	@ echo -e "Copying .env.template to .env"
	@ cp -n .env.template .env
	@ echo "Please review the config in .env"
	@ echo -e "Replacing string __CWD__ -> $(PWD)"
	@ $(SED) -i 's@__CWD__@'"$(PWD)"'@' .env

install-symlinks: #? generate symlinks
	@ echo -e "Symlink $(realpath bin/poe) to ${HOME}/bin/"
	@ cd ~/bin && ln -sf $(realpath bin/poe)

version: #? show current version
	@ echo -e "\nCurrent version is:"
	@ bin/poe --version
